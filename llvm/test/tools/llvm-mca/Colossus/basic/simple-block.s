# NOTE: Assertions have been autogenerated by utils/update_mca_test_checks.py
# RUN: llvm-mca -mtriple=colossus -mcpu=ipu2  < %s | FileCheck %s

# Here is the c code that produces the assembly for this mca test:
#   float div() {
#       int i = 16;
#       float j = 1.1;
#       float k = i / j;
#       return k;
#   }


        .text
        .allow_optimizations
        .file   "simple-block.c"
        .section        .text.div,"ax",@progbits
        .globl  div                             # -- Begin function div
        .p2align        2
        .type   div,@function
div:                                    # @div
# %bb.0:                                # %entry
        add $m11, $m11, -16
        setzi $a0, 16
        st32 $a0, $m11, $m15, 3
        setzi $a0, 838861
        or $a0, $a0, 1065353216
  # LLVM-MCA-BEGIN fpcomp
        st32 $a0, $m11, $m15, 2
        ld32 $a0, $m11, $m15, 3
        {
                f32fromi32 $a0, $a0
                ld32 $a1, $m11, $m15, 2
        }
        f32div $a0, $a0, $a1
        st32 $a0, $m11, $m15, 1
        ld32 $a0, $m11, $m15, 1
  # LLVM-MCA-END fpcomp
        add $m11, $m11, 16
        br $m10
.Lfunc_end0:
        .size   div, .Lfunc_end0-div
                                        # -- End function
        .ident  "clang version 15.0.0 (ssh://git@phabricator.sourcevertex.net/diffusion/LLVMPROJECT/llvm-project.git 1c2e4f927eff2aecb0db82e6000f5d657caf092a)"
        .section        ".note.GNU-stack","",@progbits
        .addrsig



# CHECK:      Iterations:        100
# CHECK-NEXT: Instructions:      700
# CHECK-NEXT: Total Cycles:      601
# CHECK-NEXT: Total uOps:        700

# CHECK:      Dispatch Width:    2
# CHECK-NEXT: uOps Per Cycle:    1.16
# CHECK-NEXT: IPC:               1.16
# CHECK-NEXT: Block RThroughput: 5.0


# CHECK:      Instruction Info:
# CHECK-NEXT: [1]: #uOps
# CHECK-NEXT: [2]: Latency
# CHECK-NEXT: [3]: RThroughput
# CHECK-NEXT: [4]: MayLoad
# CHECK-NEXT: [5]: MayStore
# CHECK-NEXT: [6]: HasSideEffects (U)

# CHECK:      [1]    [2]    [3]    [4]    [5]    [6]    Instructions:
# CHECK-NEXT:  1      1     1.00           *            st32 $a0, $m11, $m15, 2
# CHECK-NEXT:  1      1     1.00    *                   ld32 $a0, $m11, $m15, 3
# CHECK-NEXT:  1      1     1.00    *                   ld32 $a1, $m11, $m15, 2
# CHECK-NEXT:  1      1     1.00                        f32fromi32 $a0, $a0
# CHECK-NEXT:  1      1     1.00                        f32div $a0, $a0, $a1
# CHECK-NEXT:  1      1     1.00           *            st32 $a0, $m11, $m15, 1
# CHECK-NEXT:  1      1     1.00    *                   ld32 $a0, $m11, $m15, 1

# CHECK:      Resources:
# CHECK-NEXT: [0]   - ColossusUnitAux
# CHECK-NEXT: [1]   - ColossusUnitMain

# CHECK:      Resource pressure per iteration:
# CHECK-NEXT: [0]    [1]
# CHECK-NEXT: 2.00   5.00

# CHECK:      Resource pressure by instruction:
# CHECK-NEXT: [0]    [1]    Instructions:
# CHECK-NEXT:  -     1.00   st32 $a0, $m11, $m15, 2
# CHECK-NEXT:  -     1.00   ld32 $a0, $m11, $m15, 3
# CHECK-NEXT:  -     1.00   ld32 $a1, $m11, $m15, 2
# CHECK-NEXT: 1.00    -     f32fromi32 $a0, $a0
# CHECK-NEXT: 1.00    -     f32div $a0, $a0, $a1  
# CHECK-NEXT:  -     1.00   st32 $a0, $m11, $m15, 1
# CHECK-NEXT:  -     1.00   ld32 $a0, $m11, $m15, 1