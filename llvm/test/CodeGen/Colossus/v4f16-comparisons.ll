; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --remove_checks
; RUN: llc < %s -march=colossus -colossus-coissue=false -mattr=+ipu1 | FileCheck %s
; RUN: llc < %s -march=colossus -colossus-coissue=false -mattr=+ipu2 | FileCheck %s

; RUN: llc < %s -march=colossus -colossus-coissue=false -enable-no-infs-fp-math | FileCheck %s
; RUN: llc < %s -march=colossus -colossus-coissue=false -enable-no-signed-zeros-fp-math | FileCheck %s
target triple = "colossus-graphcore--elf"

declare <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half>, <4 x half>, metadata, metadata)

define <4 x i1> @fcmp_false_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_false_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov $m0, $m15
; CHECK-NEXT:    mov $m1, $m15
; CHECK-NEXT:    br $m10
  %retval = fcmp false <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_oeq_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_oeq_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpeq $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp oeq <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_oeq_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_oeq_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpeq $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"oeq", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_ogt_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_ogt_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpgt $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp ogt <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_ogt_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_ogt_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpgt $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"ogt", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_oge_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_oge_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpge $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp oge <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_oge_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_oge_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpge $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"oge", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_olt_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_olt_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmplt $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp olt <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_olt_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_olt_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmplt $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"olt", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_ole_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_ole_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmple $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp ole <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_ole_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_ole_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmple $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"ole", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_one_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_one_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpgt $a4:5, $a0:1, $a2:3
; CHECK-NEXT:    f16v4cmplt $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    or64 $a0:1, $a0:1, $a4:5
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp one <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_one_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_one_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpgt $a4:5, $a0:1, $a2:3
; CHECK-NEXT:    f16v4cmplt $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    or64 $a0:1, $a0:1, $a4:5
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"one", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_ord_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_ord_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpeq $a2:3, $a2:3, $a2:3
; CHECK-NEXT:    f16v4cmpeq $a0:1, $a0:1, $a0:1
; CHECK-NEXT:    and64 $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp ord <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_ord_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_ord_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpeq $a2:3, $a2:3, $a2:3
; CHECK-NEXT:    f16v4cmpeq $a0:1, $a0:1, $a0:1
; CHECK-NEXT:    and64 $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"ord", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_ueq_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_ueq_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpgt $a4:5, $a0:1, $a2:3
; CHECK-NEXT:    f16v4cmplt $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    or64 $a0:1, $a0:1, $a4:5
; CHECK-NEXT:    not64 $a0:1, $a0:1
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp ueq <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_ueq_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_ueq_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpgt $a4:5, $a0:1, $a2:3
; CHECK-NEXT:    f16v4cmplt $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    or64 $a0:1, $a0:1, $a4:5
; CHECK-NEXT:    not64 $a0:1, $a0:1
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"ueq", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_ugt_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_ugt_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmple $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    not64 $a0:1, $a0:1
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp ugt <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_ugt_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_ugt_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmple $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    not64 $a0:1, $a0:1
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"ugt", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_uge_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_uge_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmplt $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    not64 $a0:1, $a0:1
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp uge <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_uge_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_uge_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmplt $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    not64 $a0:1, $a0:1
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"uge", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_ult_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_ult_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpge $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    not64 $a0:1, $a0:1
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp ult <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_ult_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_ult_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpge $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    not64 $a0:1, $a0:1
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"ult", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_ule_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_ule_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpgt $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    not64 $a0:1, $a0:1
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp ule <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_ule_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_ule_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpgt $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    not64 $a0:1, $a0:1
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"ule", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_une_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_une_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpne $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp une <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_une_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_une_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpne $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"une", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_uno_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_uno_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpne $a2:3, $a2:3, $a2:3
; CHECK-NEXT:    f16v4cmpne $a0:1, $a0:1, $a0:1
; CHECK-NEXT:    or64 $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = fcmp uno <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}

define <4 x i1> @constrained_fcmps_uno_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: constrained_fcmps_uno_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    f16v4cmpne $a2:3, $a2:3, $a2:3
; CHECK-NEXT:    f16v4cmpne $a0:1, $a0:1, $a0:1
; CHECK-NEXT:    or64 $a0:1, $a0:1, $a2:3
; CHECK-NEXT:    mov $m0, $a0
; CHECK-NEXT:    mov $m1, $a1
; CHECK-NEXT:    br $m10
  %retval = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f16(<4 x half> %lhs, <4 x half> %rhs, metadata !"uno", metadata !"fpexcept.strict")
  ret <4 x i1> %retval
}

define <4 x i1> @fcmp_true_v4f16(<4 x half> %lhs, <4 x half> %rhs) {
; CHECK-LABEL: fcmp_true_v4f16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    setzi $m0, 65537
; CHECK-NEXT:    mov $m1, $m0
; CHECK-NEXT:    br $m10
  %retval = fcmp true <4 x half> %lhs, %rhs
  ret <4 x i1> %retval
}
